extern crate dotenv;

use dotenv::dotenv;

use scheduler::Scheduler;
use state::GatewayState;
use ws::WebsocketHandler;
use warp::{
    ws::{Ws, WebSocket},
    Filter
};

pub mod scheduler;
pub mod gateway;
pub mod state;
pub mod ws;

#[tokio::main]
async fn main() {
    // Register every environment variable.
    dotenv().ok();

    // Create a concurrent state & handler.
    let state = GatewayState::new();
    let handler = WebsocketHandler::new();
    let scheduler = Scheduler::new();

    let routes = warp::path("ws")
        .and(warp::ws())
        .map(|connection: Ws| {
            // Handle connection.
            connection.on_upgrade(move |socket: WebSocket| {
                // Return the future generated by the async function.
                handler.connect(state, socket)
            });
        });

    warp::serve(routes)
        .run(([127, 0, 0, 1], 7550))
        .await;
}